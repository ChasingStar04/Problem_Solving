/*
n자리 이친수의 개수는
(마지막 자리가 0인 n자리 이친수의 개수) + (마지막 자리가 1인 n자리 이친수의 개수) 로 생각할 수 있습니다.

n번째 자리에 0이 들어오려면, n-1번째 자리는 0 또는 1이어야 하므로
경우의 수는 (n-1번째 자리가 0인 경우의 수) + (n-1번째 자리가 1인 경우의 수) 입니다.
n번째 자리에 1이 들어오려면, n-1번째 자리는 0이어야 하므로
경우의 수는 (n-1번째 자리가 0인 경우의 수) 입니다.

위 규칙에 따라 DP를 짜면 됩니다.
*/
#include <iostream>

using namespace std;

int main()
{
    int n;
    long long dp[90][2] = {0, 1};

    cin>>n;
    for(int i=1; i<n; i++)
    {
        dp[i][0] = dp[i-1][0]+dp[i-1][1];
        dp[i][1] = dp[i-1][0];
    }
    cout<<dp[n-1][0]+dp[n-1][1];

    return 0;
}